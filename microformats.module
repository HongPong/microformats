<?php

/**
 * @file
 * Contains microformats.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Component\Utility\SafeMarkup;



/**
 * Implements hook_help().
 * @param $route_name string 'help.page.microformats'
 * @param $route_match RouteMatchInterface
 * @return string About info
 */
function microformats_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the microformats module.
    case 'help.page.microformats':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Microformats to provide support for exchanging data objects') . '</p>';
      return $output;

    default:
  }
}

/**
 *  Implements hook_theme().
 */
function microformats_contactinfo_theme($existing, $type, $theme, $path) {
    return [
        'microformats_contactinfo_block' => [
            'variables' => [
                'type' => 'personal',
                'given_name' => NULL,
                'family_name' => NULL,
                'org' => NULL,
                'tagline' => NULL,
                'street_address' => NULL,
                'extended_address' => NULL,
                'locality' => NULL,
                'region' => NULL,
                'postal_code' => NULL,
                'country' => NULL,
                'longitude' => NULL,
                'latitude' => NULL,
                'longitude_formatted' => NULL,
                'latitude_formatted' => NULL,
                'phones' => [],
                'faxes' => [],
                'email' => NULL,
                'email_url' => NULL,
                'id' => NULL,
            ],
        ],
    ];
}


/**
 * Implements hook_token_info().
 */
function microformats_contactinfo_token_info() {
    $type = array(
        'name' =>  t('Contact information'),
        'description' => t('Tokens for this site\'s contact information.'),
    );

    $tokens['type'] = array(
        'name' => t('Contact information type'),
        'description' => t('Either "Personal" or "Organization/Business".'),
    );
    $tokens['given-name'] = array(
        'name' => t('First Name'),
        'description' => t('Site contact person\'s first name.'),
    );
    $tokens['family-name'] = array(
        'name' => t('Last Name'),
        'description' => t('Site contact person\'s last name.'),
    );
    $tokens['org'] = array(
        'name' => t('Organization/Business Name'),
        'description' => t('The name of the organization or business.'),
    );
    $tokens['tagline'] = array(
        'name' => t('Tagline'),
        'description' => t('A short tagline.'),
    );
    $tokens['adr-street-address'] = array(
        'name' => t('Street Address'),
        'description' => t('The street address portion of the contact address.'),
    );
    $tokens['adr-extended-address'] = array(
        'name' => t('Extended Address'),
        'description' => t('The extended address portion of the contact address.'),
    );
    $tokens['adr-locality'] = array(
        'name' => t('City'),
        'description' => t('The city portion of the contact address.'),
    );
    $tokens['adr-region'] = array(
        'name' => t('State/Province'),
        'description' => t('The state or province portion of the contact address.'),
    );
    $tokens['adr-postal-code'] = array(
        'name' => t('Postal Code'),
        'description' => t('The postal code portion of the contact address.'),
    );
    $tokens['adr-country-name'] = array(
        'name' => t('Country'),
        'description' => t('The country name portion of the contact address.'),
    );
    $tokens['location-longitude'] = array(
        'name' => t('Longitude'),
        'description' => t('Longitude, in full decimal format (like -121.629562).'),
    );
    $tokens['location-latitude'] = array(
        'name' => t('Latitude'),
        'description' => t('Latitude, in full decimal format (like 38.827382).'),
    );
    $tokens['phone-voice'] = array(
        'name' => t('Voice Phone Number(s)'),
        'description' => t('Voice phone numbers, separated by commas.'),
    );
    $tokens['phone-fax'] = array(
        'name' => t('Fax Number(s)'),
        'description' => t('Fax numbers, separated by commas.'),
    );
    $tokens['email'] = array(
        'name' => t('Email'),
        'description' => t('This site\'s contact email address.'),
    );

    return array(
        'types' => array(
            'contactinfo' => $type,
        ),
        'tokens' => array(
            'contactinfo' => $tokens,
        ),
    );
}


/**
 * Implements hook_tokens().
 */
function microformats_tokens($type, $tokens, array $data = array(), array $options = array(), BubbleableMetadata $bubbleable_metadata) {
    $replacements = array();
    $sanitize = !empty($options['sanitize']);
    $drupalConfig = \Drupal::config('system.site');

    if ($type == 'microformats') {
        $contactinfo = Utility::getMicroformatsContactInfoVars();
        foreach ($tokens as $name => $original) {
            $value = FALSE;
            switch ($name) {
                case 'type':
                    $value = $contactinfo['#type'];
                    break;

                case 'given-name':
                    $value = $contactinfo['#given_name'];
                    break;

                case 'family-name':
                    $value = $contactinfo['#family_name'];
                    break;

                case 'org':
                    $value = $contactinfo['#use_site_name'] ? $drupalConfig->get('name') : $contactinfo['#org'];
                    break;

                case 'tagline':
                    $value = $contactinfo['#use_site_slogan'] ? $drupalConfig->get('slogan') : $contactinfo['#tagline'];
                    break;

                case 'adr-street-address':
                    $value = $contactinfo['#street_address'];
                    break;

                case 'adr-extended-address':
                    $value = $contactinfo['#extended_address'];
                    break;

                case 'adr-locality':
                    $value = $contactinfo['#locality'];
                    break;

                case 'adr-region':
                    $value = $contactinfo['#region'];
                    break;

                case 'adr-postal-code':
                    $value = $contactinfo['#postal_code'];
                    break;

                case 'adr-country-name':
                    $value = $contactinfo['#country'];
                    break;

                case 'location-latitude':
                    $value = $contactinfo['#latitude'];
                    break;

                case 'location-longitude':
                    $value = $contactinfo['#longitude'];
                    break;

                case 'phone-voice':
                    $value = $contactinfo['#voice'];
                    break;

                case 'phone-fax':
                    $value = is_array($contactinfo['#fax']) ? implode(',', $contactinfo['#fax']) :  $contactinfo['#fax'];
                    break;

                case 'email':
                    $value = is_array($contactinfo['#email']) ? implode(',', $contactinfo['#email']) :  $contactinfo['#email'];
                    break;

            }
            if ($value) {
                $replacements[$original] = $sanitize ? SafeMarkup::checkPlain($value)->__toString() : $value;
            }
        }
    }

    return $replacements;
}
